/*
PROBLEM STATEMENT
Arrange given numbers to form the biggest number
Given an array of numbers, arrange them in a way that yields the largest value.
For example, if the given numbers are {54, 546, 548, 60}, the arrangement 6054854654 gives the largest value.
And if the given numbers are {1, 34, 3, 98, 9, 76, 45, 4}, then the arrangement 998764543431 gives the largest value.

The idea is to use any comparison based sorting algorithm.
In the used sorting algorithm, instead of using the default comparison, write a comparison function myCompare() and use it to sort numbers.
Given two numbers X and Y, how should myCompare() decide which number to put first â€“ 
we compare two numbers XY (Y appended at the end of X) and YX (X appended at the end of Y).
If XY is larger, then X should come before Y in output, else Y should come before.
For example, let X and Y be 542 and 60. To compare X and Y, we compare 54260 and 60542.Since 60542 is greater than 54260, we put Y first.

import java.io.*;
import java.util.*;

class GFG {
	public static void main (String[] args) {
		//code
		Integer[] a = new Integer[] {54,546,60,548};
        Arrays.sort(a, new Comparator<Integer>() {
        	@Override
        	public int compare(Integer x, Integer y) {
        		String s = ""+x+y;
        		String t = ""+y+x;
        		int i = Integer.parseInt(s);
        		int j = Integer.parseInt(t);
        		if(i>j) return -1;
        		else if(i<j) return 1;
        		return 0;
        	}
		});
        for (Integer i : a) {
			System.out.print(i);
		}
	}
}


Another Logic.

1) Find number of digits in the largest number. Let number of digits be n.
2) Create extended version of all numbers. In extended version, we have n+1 digits formed by concatenating the number of with itself and truncating extra digits.
3) Sort original numbers according to their extended values.
4) Concatenating the sorted numbers produces th required result.

